{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/surf.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTION","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c508a46.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    //const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n      const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=18&difficulty=${difficulty}`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    //console.log(data);\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ));\r\n}","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\n// Types\r\nimport { AnswerObject } from \"../App\";\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question, answers, callback, userAnswer, questionNr, totalQuestions\r\n}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question }} />\r\n        <div>\r\n\r\n            {answers.map((answer) => (\r\n                <ButtonWrapper \r\n                    key={answer} \r\n                    correct={userAnswer?.correctAnswer===answer}\r\n                    userClicked={userAnswer?.answer===answer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n\r\n\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/surf.d64245a3.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/surf.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Catarmaran' sans-serif;\r\n    }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n        background-image: linear-gradient(270deg, #fff, #87f1ff);\r\n        background-size: 100%\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px, 2px #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background-image: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n    \r\n`;\r\n\r\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport { QuestionState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTION = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  //console.log(fetchQuizQuestions(TOTAL_QUESTION, Difficulty.EASY ));\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTION,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // users answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // check score if correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in array\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next if not the last\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTION) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Trivia Quiz</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTION ?\n          (<button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n          ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n        {loading && <p>Loading Questions ...</p>}\n\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTION}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTION - 1\n          ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          ) : null}\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}