{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","components/Option.styles.ts","components/Option.tsx","images/surf.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Category","Difficulty","fetchQuestions","amount","category","difficulty","a","endpoint","console","log","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","Option","useState","option","setOption","changeDifficulty","e","difficultyKey","target","Object","entries","filter","item","selectedDifficulty","onChange","categoryKey","selectedCategory","Any","GeneralKnowledge","Books","Film","Music","MusicalsAndTheatres","Television","VideoGames","BoardGames","Nature","Computers","Mathematics","Mythology","Sports","Geography","History","Politics","Art","Celebrities","Animals","Vehicles","Comics","Gadgets","JapaneseAnimeAndManga","CartoonAndAnimations","event","EASY","MEDIUM","HARD","GlobalStyle","createGlobalStyle","BGImage","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","newQuestions","length","undefined","currentTarget","prev","answerObject","TOTAL_QUESTION","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e61f936.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Category {\r\n    Any = \"\",\r\n    GeneralKnowledge = \"9\",\r\n    Books = \"10\",\r\n    Film = \"11\",\r\n    Music = \"12\",\r\n    MusicalsAndTheatres = \"13\",\r\n    Television = \"14\",\r\n    VideoGames = \"15\",\r\n    BoardGames = \"16\",\r\n    Nature = \"17\",\r\n    Computers = \"18\",\r\n    Mathematics = \"19\",\r\n    Mythology = \"20\",\r\n    Sports = \"21\",\r\n    Geography = \"22\",\r\n    History = \"23\",\r\n    Politics = \"24\",\r\n    Art = \"25\",\r\n    Celebrities = \"26\",\r\n    Animals = \"27\",\r\n    Vehicles = \"28\",\r\n    Comics = \"29\",\r\n    Gadgets = \"30\",\r\n    JapaneseAnimeAndManga = \"31\",\r\n    CartoonAndAnimations = \"32\"\r\n}\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuestions = async (amount: number, category: Category, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}`;\r\n    console.log(endpoint);\r\n    const data = await (await fetch(endpoint)).json();\r\n    //console.log(data);\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ));\r\n}","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\n// Types\r\nimport { AnswerObject } from \"../App\";\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question, answers, callback, userAnswer, questionNr, totalQuestions\r\n}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question }} />\r\n        <div>\r\n\r\n            {answers.map((answer) => (\r\n                <ButtonWrapper \r\n                    key={answer} \r\n                    correct={userAnswer?.correctAnswer===answer}\r\n                    userClicked={userAnswer?.answer===answer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n\r\n\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeee;\r\n  border-radius: 15px;\r\n  border: 2px solid #0085a3;\r\n  padding: 30px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.55);\r\n  text-align: left;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n\r\n  select {\r\n    font-size: 1rem;\r\n    background: #ebfeee;\r\n    border: 1px solid #0085a3;\r\n  }\r\n`;\r\n\r\n","import React, { useState } from 'react'\r\n// Types\r\nimport { Category, Difficulty } from '../API';\r\n// Styles\r\nimport { Wrapper } from './Option.styles';\r\n\r\ntype OptionProps = {\r\n    category: Category;\r\n    difficulty: Difficulty;\r\n    callback: any;\r\n};\r\n\r\nconst Option: React.FC<OptionProps> = ({ category, difficulty, callback }) => {\r\n\r\n    const [option, setOption] = useState({ category: category, difficulty: difficulty });\r\n\r\n    const getCategoryFromValue = (value: string) => Object.entries(Category).filter((item) => item[1] === value)[0][0];\r\n\r\n    const getDifficultyFromValue = (value: string) => Object.entries(Difficulty).filter((item) => item[1] === value)[0][0];\r\n\r\n    const changeCategory = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        let categoryKey = getCategoryFromValue(e.target.value) as keyof typeof Category;\r\n        let selectedCategory = Category[categoryKey];\r\n        //console.log(\"selectedCategory=\" + selectedCategory.toString());\r\n        setOption({ ...option, category: selectedCategory });\r\n        callback({ ...option, category: selectedCategory });\r\n    }\r\n    const changeDifficulty = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        let difficultyKey = getDifficultyFromValue(e.target.value) as keyof typeof Difficulty;\r\n        let selectedDifficulty = Difficulty[difficultyKey];\r\n        //console.log(\"selectedDifficulty=\" + selectedDifficulty.toString());\r\n        setOption({ ...option, difficulty: selectedDifficulty });\r\n        callback({ ...option, difficulty: selectedDifficulty });\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n        <form>\r\n            <p className=\"number\">\r\n                Category :\r\n            <select onChange={changeCategory} value={category}>\r\n\r\n                    <option value={Category.Any}>Any</option>\r\n                    <option value={Category.GeneralKnowledge}>General Knowledge</option>\r\n                    <option value={Category.Books}>Books</option>\r\n                    <option value={Category.Film}>Film</option>\r\n                    <option value={Category.Music}>Music</option>\r\n                    <option value={Category.MusicalsAndTheatres}>Musicals And Theatres</option>\r\n                    <option value={Category.Television}>Television</option>\r\n                    <option value={Category.VideoGames}>Video Games</option>\r\n                    <option value={Category.BoardGames}>Board Games</option>\r\n                    <option value={Category.Nature}>Nature</option>\r\n                    <option value={Category.Computers}>Computers</option>\r\n                    <option value={Category.Mathematics}>Mathematics</option>\r\n                    <option value={Category.Mythology}>Mythology</option>\r\n                    <option value={Category.Sports}>Sports</option>\r\n                    <option value={Category.Geography}>Geography</option>\r\n                    <option value={Category.History}>History</option>\r\n                    <option value={Category.Politics}>Politics</option>\r\n                    <option value={Category.Art}>Art</option>\r\n                    <option value={Category.Celebrities}>Celebrities</option>\r\n                    <option value={Category.Animals}>Animals</option>\r\n                    <option value={Category.Vehicles}>Vehicles</option>\r\n                    <option value={Category.Comics}>Comics</option>\r\n                    <option value={Category.Gadgets}>Gadgets</option>\r\n                    <option value={Category.JapaneseAnimeAndManga}>Japanese Anime And Manga</option>\r\n                    <option value={Category.CartoonAndAnimations}>Cartoon And Animations</option>\r\n\r\n                </select>\r\n            </p>\r\n            <p className=\"number\">\r\n                Difficulty :\r\n            <select onChange={(event) => changeDifficulty(event)} value={difficulty}>\r\n                    <option value={Difficulty.EASY}>Easy</option>\r\n                    <option value={Difficulty.MEDIUM}>Medium</option>\r\n                    <option value={Difficulty.HARD}>Hard</option>\r\n                </select>\r\n            </p>\r\n        </form>\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Option;\r\n","export default __webpack_public_path__ + \"static/media/surf.d64245a3.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/surf.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Catarmaran' sans-serif;\r\n    }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n        background-image: linear-gradient(270deg, #fff, #87f1ff);\r\n        background-size: 100%\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px, 2px #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background-image: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n\r\n    .start-region {\r\n        text-align: center;\r\n    }\r\n\r\n`;\r\n","import React, { useState, FC } from 'react';\nimport { fetchQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\nimport Option from './components/Option';\n// Types\nimport { QuestionState, Category, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTION = 10;\n\nconst App: FC = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [option, setOption] = useState({ category: Category.Computers, difficulty: Difficulty.EASY });\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTION, option.category, option.difficulty\n    );\n    setQuestions(newQuestions);\n\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // users answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // check score if correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in array\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next if not the last\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTION) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  const checkOption = (option: { category: Category, difficulty: Difficulty }) => {\n    console.log(option);\n    setOption(option);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Trivia Quiz</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTION ?\n          (<div className=\"start-region\">\n            <button className=\"start\" onClick={startTrivia}>Start</button>\n            <Option category={option.category} difficulty={option.difficulty} callback={checkOption} />\n          </div>\n          ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n        {loading && <p>Loading Questions ...</p>}\n\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTION}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTION - 1\n          ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          ) : null}\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}